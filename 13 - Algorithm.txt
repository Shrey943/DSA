# As we all know algorithm is nothing other then different ways or different processes to do a task. 

In algorithm we basically talk about the sorting. But why sorting? moreover what is sorting?

What is sorting? : Sorting is nothing other than arranging data in assending or decending order OF SOME PERTICULAR 
                   CONDITION such as sorting by duration, by name, by time of update, by rating, by price etc.
                (Notice, these are the conditions, sorting could always be in assending or decending order based on condition)

Why Sorting? : Ye bhi uper hi answer hogaya... as almost in everywhere we need sorting based on different conditions.
               As every program needs some kind of sorting then its important to have a quick and easy sorting algo.

There are many types of sorting algo(and many more could which are not yet discovered) every method have its own
benefits and its own drawbacks. Hence algo's are selected accordingly. Pr kis criteria mai judge karoge algo ko?

# Criteria's for sorting algorithm: 

1. Time Complexity : Dekho ye toh sbse pehle dekhne waali cheeze hoti h, time complexity must be good for big datas.
                     if a algo takes O(n^2) while other takes O(nlogn) then definatly will choose 2nd.
                     (time complexity vese hi worst case ki hoti h)

2. Space Complexity : Now Space management for big data is also important. Like how much space does your algo use while sorting.
    # Inplace sorting algorithm: Algo which consumes constant space and whose space does not grows as the input grows 
                                  are called inplace sorting algorithm.
                                  (Like any variable not consuming faltu space while sorting)
    (Sometimes if it loads all data at once but decreases time complexity then it MAY be considered but must not exceed limits)

3. Stability : algorithm in which if any elements are same then if the first occurance is at first position in results
               then the algorithm is called stable.
               ex:  input  : 9 3 2 1 4 2 7 8  
                let named as a b c d e f g h     accordingly 
                   output1 : 1 2 2 3 4 7 8 9  -  stable 
                    then,    d c f b e g h a     
                   output2 : 1 2 2 3 4 7 8 9  -  stable 
                    then,    d f c b e g h a  -  unstable
                Hn hn pata h tum sooch raye hoge ki kya hi farak padta h pr dete agar sort by rating kara jaye aur kisi
                do ki rating same ho toh to kuch bol nai skte na ki kb kon se uper aayegi iska mtlb unstable.

4. A) Internal sorting algo: when all the data is loaded in memory(RAM).
   B) External sorting algo: when all data is read from a file or database, this reduced memory consumption.

5. Adaptive : If a sorted array is given as an input then algo takes less time to sort.(identify that it is sorted) 
              Mtlb ek aisa algo ho skta h jo bina sooche ki sorted h ya nai, same sets of command run kare har element mai, toh usko adaptive nai kahenge. Jbki agar dusra algo pehle check kr le aur fatak se batade ki sorted h toh usko adaptive kahenge. 

6. Recursive / Non-Recursive sorting algo:  Recursion accha nai hota ye toh pata hi hoga toh non-recursive algo
                                            (which do not use recursion in them) ko better kahenge.

7. In-place :  Algorithms that doesn't use any extra space other than the space of array for sorting is called in-place algorithm.
               However, some constant space for variables are allowed. (space required to sort sould not increase with input)
                    
                  
Types of sorting algorithm : 

A) Bubble sort : bubble sort is the most simple yet effective sorting algorithm. In bubble sort you go through the array n-1 times which is 
                 known as pass. On each you keep on compairing 2 elements like index 0-1, 1-2, 2-3,....(n-1)-n and swapping them if element on
                 right is greater than element on left. On each paas, the greatest element of the array is setted on the left and so in next
                 pass you need not to check that and after that elements. also on (n-1)th pass, the array gets sorted hence you need to go 
                 N-1 PASSES TO SORT AN ARRAY OF LENGTH N.

                 I'm not gonna show the comparisions and swap, just understand it:
                 array : 5, 3, 7, 3, 1, 9

                 pass1 : 3, 5, 3', 1, 7, 9     // In pass 1 largest element came to end hence we will not compare the last element in nextpass  
                 pass2 : 3, 3', 1, 5, 7, 9     // Last 2 seted, comparing length for next pass = 4
                 pass3 : 3, 1, 3', 5, 7, 9     // Last 3 seted, comparing length for next pass = 3
                 pass4 : 1, 3, 3', 5, 7, 9     // Last 4 seted, comparing length for next pass = 2
                 pass5 : 1, 3, 3', 5, 7, 9     // Last 5 seted, comparing length for next = 1 (Ab khud ko khud se compare karega kya)

               # Remember : Array of length n requires n-1 passes to sort (in bubble sort)

                             Comparision_required                   Possible_swaps             in terms of N

                  pass1            5                                     5                          n-1           
                  pass2            4                                     4                          n-2
                  pass3            3                                     3                          n-3
                  pass4            2                                     2                          n-4
                  pass5            1                                     1                          n-5

                 Total swaps : (n-1) + (n-2) + (n-3) +..........+ (n - (n-1))  // Series length = n-1 
                            => n(n-1) - [1 + 2 + 3 +.....+ (n-1)]              // Taking  n common, from n-1
                            => n(n-1) - [(n - 1)(n - 1 + 1)]/2                 // Using formula, sum of series = n(n-1)/2
                            => n(n-1) - n(n-1)/2
                            => n(n-1)/2
                            => n²/2  -  n/2

         Since we taking only the largest impacting term in time complexity,
         Hence, Time complexity is O(n²).

      Scoring of Bubble sort on basis of criterias:

      1. Time complexity  :  O(n²)
      2. Space complexity : It do not creates any variable which grows with input so good.
      3. Stability        : Yes, Jaisa apan ne uper dekha ki 3', 3 se peeche hi raha, iska mtlb ye algo stable h.
      4. Internal SA      : hai kyo ki kahi bahar se nai kia data read
      5. Adaptive         : May algo is sorted but it needs to go all the passes hence its not adaptive.(By default, but we can make it)

      *** Bubble sort is not adaptive by default but we can make it adaptive as checking if it does any swap on first pass or not.
          Since then too it needs to go 1 pass hence it's time complexity would decrease to O(n)*** 

      6. Recursive : No, no recursion used.
      7. In-place  : Yup, no extra increasing space required to sort.

   //Important 
   ***** Why Bubble sort is called Bubble sort ? 

   Since, in this sorting algorithm, Bigger elements moves towards back side and respectively, smaller moves towards front, same as bubbles
   move toward upper direction in water. *****

   We can use Bubble Sort as per below constraints :

   1. It works well with large datasets where the items are almost sorted because it takes only one iteration to detect whether the list is 
      sorted or not. But if the list is unsorted to a large extend then this algorithm holds good for small datasets or lists.
   2. This algorithm is fastest on an extremely small or nearly sorted set of data.
   


B) Insertion Sort : This algo uses the concept of inserting element on right place in an already sorted array. The element is kept
                    compairing from last element towards first element. In comparision, if this element is smaller than element in array then
                    arrays element index is incremented by 1 and element is set at that position. It keeps going till an element is larger 
                    than the element in the array.

                    Above was the concept which it use, actually when an array is given to insertion sort, Algo assumes 1st element as an 
                    sorted array(which it is as 1 element array is always sorted) and then it keeps on checking next elements one by one. 
                    and inserting it using above concept.

                 array : 5,| 3, 7, 3, 1, 9

                 // The line signifies the assumtion of 2 arrays from original array, left side is sorted array while right side is unsorted array.

                 pass1 : 3, 5| 7, 3', 1, 9     // It only assumes 5 as and input and compairs with the last element(3) since its big, it donot 
                                               // compare further.
                 pass2 : 3, 5, 7| 3', 1, 9     // Now, it takes 7 as an input and compairs with last element(5)
                 pass3 : 3, 3', 5, 7| 1, 9     // Now, it takes 3'and compairs with last element(7) but since its smaller, it set 7 at position 
                                               // of 3' and continues to compare till its behind 3 and as 3 is same it breaks 
                 pass4 : 1, 3, 3', 5, 7| 9     // Now, it takes 1 as an input and compairs with all till its reached first position
                 pass5 : 1, 3, 3', 5, 7, 9|    // Now, it takes 9 as an input and compairs with last element(7) 

               # Remember : Array of length n requires n-1 passes to sort

                             Comparision_required                   Possible_swaps             in terms of N

                  pass5            5                                     5                          n-1           
                  pass4            4                                     4                          n-2
                  pass3            3                                     3                          n-3
                  pass2            2                                     2                          n-4
                  pass1            1                                     1                          n-5

                 Total swaps : (n-1) + (n-2) + (n-3) +..........+ (n - (n-1))  // Series length = n-1 
                            => n(n-1) - [1 + 2 + 3 +.....+ (n-1)]              // Taking  n common, from n-1
                            => n(n-1) - [(n - 1)(n - 1 + 1)]/2                 // Using formula, sum of series = n(n-1)/2
                            => n(n-1) - n(n-1)/2
                            => n(n-1)/2
                            => n²/2  -  n/2

         Since we taking only the largest impacting term in time complexity,
         Hence, Time complexity is O(n²).

         *** If array is already sorted, then it just compairs every element with its previous one once and returns the array. Hence it is 
             an adaptive algorithm. ***
         
      Scoring of Insertion sort on basis of criterias:

      1. Time complexity  :  O(n²)
      2. Space complexity : It do not creates any variable which grows with input so good.
      3. Stability        : Yes, Jaisa apan ne uper dekha ki 3', 3 se peeche hi raha, iska mtlb ye algo stable h.
      4. Internal SA      : hai kyo ki kahi bahar se nai kia data read
      5. Adaptive         : Adaptive by default, reson above.
      6. Recursive        : No, no recursion used.
      7. In-place         : Yup, no extra increasing space required to sort.

      Due to adaptive nature, bestCase TC = O(n)

   **Intermideate result of this algo is of no use, while in bubble sort at least we get largest elements at last in 
     intermideate passes.** 
   
   We can use Insertion Sort as per below constraints :

   1. If the data is nearly sorted or when the list is small as it has a complexity of O(N2) and if the list is sorted a minimum number of 
      elements will slide over to insert the element at it’s correct location.
      
   2. This algorithm is stable and it has fast running case when the list is nearly sorted.

   3. The usage of memory is a constraint as it has space complexity of O(1).



C) Selection Sort :  As the name says, its nothing more than the selection of smallest element. Dekho, is algo mai bhi insertion sort jaise
                     original array ko 2 array mai assume kia jaata h, left side sorted array and right side unsorted array. Liken, insertion
                     mai 1st element ko sorted mai pehle ki rakh diya tha, magar isme initially sored mtlb left side empty rehti h.
                     Ab ye kya krta h ki, right side ki list ko check krna chaalu krta h, 1st element on unsorted array ko pehle smallest 
                     assume kia fir check krna chaalu kia, agar koi aur element usse chota mila, toh smallest element ka title usko de dia.
                     Aise hi baaki elements ko check krte chalenge ki smallest se chota h kya koi....
                     Jb list ke end mai pahuch jaayege toh jis bhi element ke paas smallest ka title hoga, usko 1st element of unsorted array,
                     ke saath swap kr denge, smallest element aa gaya apne paas 1st position mai toh sorted array ko badha denge,
                     aur ek ek kr ke baaki elements ke liye bhi aise hi check kr lenge

                 *** smallest ka title nai bolte, usko best minimal bolte h, mtlb same h pr ab se best minimal hi, theek h ***
                 ***** Best minimal value nai hoti, smallest value ka index hota h, kisi value ko best minimal ka title dena mtlb best minimal 
                       mai uska index store krna *****
                    
                 // The line signifies the assumtion of 2 arrays from original array, left side is sorted array while right side is unsorted array.
                 
                 array : |5, 3, 7, 3', 1, 9    //  Is algo mai initially sorted empty h, insertion mai 1st element ko sorted maante the

                 pass1 steps,                  // Pehle isne 5 ko smallest maana, aur usse chota element baaki array mai dhoodhna chaalu kia
                                               // Jaise hi usko 3 mila, usne best minimal ka title 3 ke index ko de diya
                                               // Ab aage dekhna chaalu kia, toh usko 1 mila toh usne best minimal ka title 1 ke index ko de diya
                 pass1 : 1,| 3, 7, 3', 5, 9    // Jb poori list dekh li, tb last mai first element of unsorted ko best minimal se swap kr dete h
                                               
                                               // Ab fir ek baar, unsorted ke first mtlb 3 ko  smallest maana
                 pass2 : 1, 3,| 7, 3', 5, 9    // 3 se chota nai  mila toh vaha ke waha hi raha vo, aur soreted ko badha dia
                 pass3 : 1, 3, 3',| 7, 5, 9    //Aise hi baaki paas bhi honge
                 pass4 : 1, 3, 3', 5,| 7, 9   
                 pass5 : 1, 3, 3', 5, 7,| 9   // Ab ek element bs bacha h toh sorted hi hoga, largest apne aap last mai aa gaya.

               # Remember : Array of length n requires n-1 passes to sort (in bubble sort)

                             Comparision_required                   Possible_swaps             in terms of N

                  pass1            5                                     1                          n-1           
                  pass2            4                                     1                          n-2
                  pass3            3                                     1                          n-3
                  pass4            2                                     1                          n-4
                  pass5            1                                     1                          n-5

           *** Ab dekho, swap toh bs n krne padenge pr comparision ko toh koi nai rok skta isiliye time complexity O(n²) hi rahegi
               Pr, kyoki swaps km h toh ye algo bahut km memory consume karega, hence good algo for limited memory space ***

            Total comparision : (n-1) + (n-2) + (n-3) +..........+ (n - (n-1))  // Series length = n-1 
                            => n(n-1) - [1 + 2 + 3 +.....+ (n-1)]              // Taking  n common, from n-1
                            => n(n-1) - [(n - 1)(n - 1 + 1)]/2                 // Using formula, sum of series = n(n-1)/2
                            => n(n-1) - n(n-1)/2
                            => n(n-1)/2
                            => n²/2  -  n/2

         Since we taking only the largest impacting term in time complexity,
         Hence, Time complexity is O(n²).

         *** If array is already sorted, then too it will do all comparisions. Hence it is not an adaptive algorithm. ***
         
      Scoring of Selection sort on basis of criterias:

      1. Time complexity  :  O(n²)
      2. Space complexity : Since swaps are as minimum as possible, hence have a very good space complexity.
      3. Stability        : Nai yaaar, ye stable nai h. Example neeche dekho
      4. Internal SA      : hai kyo ki kahi bahar se nai kia data read
      5. Adaptive         : Not adaptive, swap nai krta pr comparisions poore karega.
      6. Recursive        : No, no recursion used.
      7. In-place         : Yup, no extra increasing space required to sort.

   **Intermideate result of this algo is useful as on every pass we get the smallest element of whole array sorted at first possition.** 

   stability example : 8 3 8' 1 8''  // first it took 8 as minimal then found 3 then on going further it found 1 so minimal becomes 1
               pass1 : 1 3 8' 8 8''  // Hence, 1st position element i.e. 8 is swaped with position of 1             
               pass2 : 1 3 8' 8 8''  // But, as you can see, now 8 is behind 8' thats why not stable
               pass3 : 1 3 8' 8 8''
               pass4 : 1 3 8' 8 8''
   # We can use Selection Sort as per below constraints :

   1. When the list is small. As the time complexity of selection sort is O(N2) which makes it inefficient for a large list.
   2. When memory space is limited because it makes the minimum possible number of swaps during sorting.


D) Quick Sort : Quick sort is the divide and conquer technique. Dekho, ek element ko pakdo, usko place mai laao, aur us place se array ko 2 
                parts mai todo(ek 0 se position-1 & ek position+1 se last tk). Right place mai laane ko kehte h partition. Ab jo 2 array mile h
                uska partition kr lo, fir dono se 2-2 array milenge, aise tb tk krte raho jb ek 1 element na bache, ab 1 toh sorted hi hoga na.
                Har partition mai ek element place mai aata jata h. Pr partition kare kaise....neeche dekh.
                
                Arre dekho, apan kya krte h, ki koi ek element ko pakadte h aur usko naam dete h
                pivot. Pivot apan first ko bhi le skte h, last ko bhi aur random ko bhi. Ab pivot ko aise place krna h ki usse bade right side 
                aur usse chote left side aaa jaye. aisa krne apan 2 variable ki help lete h, i and j. (iske aage ka method, considering pivot 
                as first element ka h). choto ko left aur bado ko right side krne se element automatically apni sahi position mai aajata h.
                zaha se usko hilne ki zarurat nai. Ab partition ke steps kya rehte h ye neech likhe h,

                - Pehle first element ko pivot liya, 2nd element ko i aur last element ko j.
                - Ab apan ne i se bola, check karo iske aage kaha tk pivot se chote element h, agar koi bada mile toh ruk jaana. 
                - Maan lo i ko ussi, first position, jaha se start kiya i ne waha hi bada mil gaya toh, i toh waha hi ruk gaya.
                - Ab j se bolega ki bhaiya last se meri taraf aao aur check karo, sb pivot se bade elements hi h na, agar koi chota ho toh 
                  wahi ruk jaana aur report krna. 
                - Agar j ko koi chota element milta h raste mai toh toh ye bolta h, ki aae pivot se bade element ke right side kya kr ra h 
                  chal chote element taraf ja, aur fir i aur j ki value swap kr lenge.
                - Ab fir, i se bolenge ki jis position mai ruke the, waha se resume karo bade element ko dhoodna, pr hn, jaise hi j ko cross kr lo
                  batana.
                - Aur aise hi j se bhi kehte h, ki chote element ko dhoodhna start karo, but jaise hi i ko cross karo ruk jana.

                Ab dekho, jb j, i ko cross kr lega, mtlb j ke right side sb bade h aur left side sb chote(nai toh dono pehle hi ruk ke swap kr lete)
                aur j ek chote element mai khada h, isiliye j aur pivot ko swap kr denge, ab pivot le left side chote, right side bade elements h. 
                Aur apna pivot sahi jagah pr h. 

                Agar smjh nai aaya toh neech waala example dekh, fir code dekh lena:

                              5 3 7 3' 1 9

                partition 1 : 5 3 7 3' 1 9  // Pivot = 5, i = 3 and j = 9 (i and j index rehte h, yaha sirf smjhaane value ke roop mai likha h)
                              5 3 1 3' 7 9  // i badha, usko 7 mila, pivot se bada toh vo ruk gaya, fir j badha(decending), usko 1 mila, pivot se chota toh usne dono ko swap kr diya 
                              3'3 1 5  7 9  // i fir badha bade ki talash mai, uskko 7 mila, toh ruka, ab j chota dhoodhne jaise hi badha uske 3' mila, pr usko realize hua ki vo toh
                                               i ke aange aa gaya toh usne i ke saath swap na kr ke pivot ke saath hi kr liya, ab dekho, 5 ke left side poore chote aur 
                                               right side poore bade h, mtlb 5 apni sahi position mai h, ab usko nai choona h, 
                                               toh ab partion lagayenge  0 se 2 index ke array ke liye and 4 se 5 index ke liye

               ** actually mai array ko 2 parts mai nai kara jata h, same array mai operations hote h, bs kitne array ko chooona h iski permission
                  di jaaati h. **

                partition 2(for 0 to 2) : 1 3 3' 5 7 9  // j ki position 2 thi toh array ko fir partition ke liye bheja jaayega, 0-1 ke liye
                                                        // Jb 2 hi element ho toh first pivot aur 2nd i and j both, agar pivot se chota hoga 
                                                        // 2nd element toh j nai badhega, aur i toh iske aage ja bhi nai skta. Ab pivot aur j
                                                        // Swap ho jayenge toh sahi aa jaayega, aur agar 2nd bada hota toh j decrease hoke 
                                                        // pivot ki position mai aajata, usko equal element milta toh wahi ruk jata aur khud hi
                                                        // se swap kr leta.
                partition 3(for 4 to 5) : 1 3 3' 5 7 9  // pehle 0-2 ke liye call kiye, issiliye 1 3 3' alligned h

                partition 4(for 0-1) : 1 3 3' 5 7 9 

      # Worst case :  When array is already sorted. partition required (n-1) and as we can see, on each partition we need to transverse whole
                      array hence time required for each partition is some linear function on n i.e. kn + c (where k and c are constants)  
                      Therefore, time required when  array is sorted : (n-1)(kn + c) 

                        *****  Hence, time complexity in worst case : O(n²)  *****

      # Best case : When partition is always from middle. partition required are log n. Ab poora transverse toh krna hi padega logn baar.

                        ***** Hence best case complexity is O(nlogn) *****
                        ***** Also, Avg time complexity is : O(nlogn) *****

      Scoring of Quick sort on basis of criterias:

      1. Time complexity  :  O(n²) (worst hi batai jaati h), O(nlogn)
      2. Space complexity : It do not creates any variable which grows with input so good. (In - Place)
      3. Stability        : Naah, Not stable re, aage peeche ho skte h
      4. Internal SA      : hai kyo ki kahi bahar se nai kia data read
      5. Adaptive         : Adaptive by default, reason above.
      6. Recursive        : Yessss, Poora recursive based hi h, but iteration se bhi kr skte h
      7. In-place         : Yup, no extra increasing space required to sort.


      We can use Quick Sort as per below constraints :
      
      1. Quick sort is fastest, but it is not always O(N*log N), as there are worst cases where it becomes O(N2).
      2. Quicksort is probably more effective for datasets that fit in memory. For larger data sets it proves to be inefficient so algorithms 
         like merge sort are preferred in that case.
      3. Quick Sort in is an in-place sort (i.e. it doesn’t require any extra storage) so it is appropriate to use it for arrays.
      
      # Low : jo bhi smallest index hota h effective array ka (mtlb jis array mai kaam krna h)
      # High : jo bhi highes index hota h effective array ka 

      Pivot as Last element :

      pivot last element rehega(high position waala), i ki value low -1 rahegi, aur pivot last mai i +1 position mai aayega, 
      Dekho fatak se, j low se transerverse krna chaalu karega, j ko jaise hi koi pivot se chota element milega, vo i ki value increment kr ke
      i se swap kr lega, aise mai i position tk sirf pivot se chote element hi rahenge, jaise hi j high-1 position check kr lega, toh uske baad
      i+1 position ke saath pivot swap kr lega. Ab pivot ke left side chote aur right side bade elements h.

      Arre bahutai easy h, code toh dekho zara.

E) Merge Sort : Merge sort ka ek fanda h, pehle todo fir jodo, (divide and merge). Pehle recursion ka use kr ke array ko mid mai se todte jaao
                jab tk sirf ek element na bache, which is already sorted. Ab waha se wapas ussi path mai jisse aaye the, wapas jaana chaalu karo 
                merge krte hue. Ab aata h real khel, merge sort ka naam hi merge se pada, ki 2 sorted array ko merge krna. jb apan recursion mai
                last mai pahuchenge toh 2 single elements milenge aur unhi ko 2 sorted array maan ke apan merge karenge. Aise hi jb merge kr lenge
                toh toh usse uper pahuchenge, vaha 2 sorted array ho jayenge toh unko merge karenge. Aise hi poora sort ho jayega. 

                And merge krne ki process neeche h:

                - first & second array ke first elements ke index ko i and j maano.
                - then ek empty array banao.(let name be temp)
                - Ab i aur j ko compare krna chaalu kardo, agar i ki value <= j ki value hui toh temp array mai add kr do. and i ko increment kr do. 
                  aise ki agar j chota ya equal hua toh usko add kr ke increment kr do.
                - Jaise hi koi bhi array, apne end index se increment ho toh dusre array ke saare elements temp mai add kr do. 
                - Lo ho gaya sort.
               
               ** In real implementation, 2 array nai liye jaate h, low index and high index bs milta h aur array ka mid(low+high/2) nikaal ke
                  low to mid ko ek arraay and mid+1 to high ko dusra array maante h.(dono sorted bhi issi pattern mai rehte h)
               
|                                                        5 3 7 3' 1 9                  (l = 0, h = 5, m = 2))
|                                                _____________|_____________     
|                                               |                           |    
|                         (l=0, h=2, m=1)     5 3 7                      3' 1 9        (l = 3, h = 5, m = 4)
|                                       ________|________          _________|________
|                                      |                 |        |                  |
|                    (l=0,h=1,m=0)    5 3                7      3' 1                 9    (l=3,h=4,m=3) {for 7: l=h=2 & for 9 : l=h=5 
|                                  ____|____                  ____|_____          Hence they are ready for merge and waiting for 3' 1 to return} 
|                                 |         |                |          |
|                                 5         3                3'         1         // Yaha se wapas jana start.
|                                                                                 // 5,3 merge ke liye jayenge fir sort hoke aayenge,
|                                                                                 // fir 7 ke saath merge honege and so on 

   # Now Kisi bhi case mai(worst, avg, best) har baar, array ko middle se hi break krna h toh uski time complexity toh logn ho gayi,
     Also, har baar hi usko, n ke kisi linear equation times kaam krna padta h, it can be 2n, n/2 or anything toh 100 baat ki ek baat

     Worst, Average, Best Case Time complexity of merge sort is O(nlogn).
     
      Scoring of Quick sort on basis of criterias:

      1. Time complexity  : O(nlogn) 
      2. Space complexity : O(n) Har baar isko n size ka array lagega.
      3. Stability        : Are bilkul stable h
      4. Internal SA      : Yup
      5. Adaptive         : Naah....Poora sorted hoga toh bhi ye poora array jaayega
      6. Recursive        : Yessss, Poora recursive based hi h.
      7. In-place         : NO , O(n) extra space leta h.

      We can use Merge Sort as per below constraints :

      - Merge sort is used when the data structure doesn’t support random access since it works with pure sequential access that is forward 
        iterators, rather than random access iterators.
      
      - It is widely used for external sorting, where random access can be very, very expensive compared to sequential access.
      
      - It is used where it is known that the data is similar data.
      
      - Merge sort is fast in the case of a linked list.
      
      - It is used in the case of a linked list as in linked list for accessing any data at some index we need to traverse from the head to that index and merge sort accesses data sequentially and the need of random access is low.
      
      - The main advantage of the merge sort is its stability, the elements compared equally retain their original order.


E) Count Sort : Aree Bhai isse easy aur kuch na mil paayega. Fatak se dekho, pehle toh given array ka sbse biggest element nikaalo, 
                fir biggest element+1 size ka ek auxilary array banao(index from 0 to biggest element) let name of auxilary array be count 
                kyoki vo count hold karega. Ab count array ki saari values ko zero se initialize kr do(calloc se ho jayega). 
                Ab suno, given array ko traverse karo, aur jo bhi value ho, us index ko 1 se increment kardo count mai. 

                count basically hold karega ki count array ki kon si index kitni baar use hui h.

                Fir kaya h, count ko transverse kr lo aur jb tk value zero na ho, given array mai daalte jaao. Pata h kuch pallee nai pada,
                Toh neeche dekho na,

                given_array : 5 3 7 3' 1 9                         // biggest value : 9 
                count       : 0 0 0 0 0 0 0 0 0 0                  // count size : 9 + 1
                count_index : 0 1 2 3 4 5 6 7 8 9                  // last index value : 9
                
                // Transversing given array.
                
                count       : 0 1 0 2 0 1 0 1 0 1                  // incremented value of index as per value in given array
                count_index : 0 1 2 3 4 5 6 7 8 9                  // as 3 came 2 times hence, value at index 3 is 2

                // Transversing count array to override given array 

                given_array : 1 3 3 5 7 9                    // Count ke zero index pe 0 hence nothing, 1 pe 1 toh 1 insert kr diya and value decrement kr di,
                                                             // At index 3, pehle 3 ko add kia fir decrement kia, but abhi bhi 1 bacha toh fir 
                                                             // insert kr ke count mai value decrement kr di,......and so on......
      
      ***Count Sort One of the fastest sorting algorithm h But at a very high cost of space. ***

      Now, vese toh ye 2 baat given list transverse krta h and ek baar max +1 list hence time = n + n + max
                                                                                              = 2n + n + c (where c is any integer)
                                                                                              = 3n + c
                                                                                              = O(n + c)   // But as you know, No constants
                                    Hence, Time complexity = O(n)

                       Isse behtar time complexity dekhi h, aur kisi above algo mai ???

      Scoring of Quick sort on basis of criterias:

      1. Time complexity  : O(n + k) where n is size and k is range of input 
      2. Space complexity : O(n + k) where n is size and k is range of input (auxilary space = O(n + k))
      3. Stability        : Keh skte h
      4. Internal SA      : Yup
      5. Adaptive         : Naah....Poora sorted hoga toh bhi ye poora array jaayega
      6. Recursive        : NO.
      7. In-place         : NO , O(n + k) extra space leta h.

      Points to be noted: 
         1. Counting sort is efficient if the range of input data is not significantly greater than the number of objects to be sorted. 
            Consider the situation where the input sequence is between range 1 to 10K and the data is 10, 5, 10K, 5K. 
         
         2. It is not a comparison based sorting. It running time complexity is O(n) with space proportional to the range of data. 
         
         3. It is often used as a sub-routine to another sorting algorithm like radix sort. 
         
         4. Counting sort uses a partial hashing to count the occurrence of the data object in O(1). 
         
         5. Counting sort can be extended to work for negative inputs also.

